/**
 **     Моделирование кинематики, динамики и механики взаимодействия
 **     множества поляризованных частиц первого и второго порядка
 **     (пространственные вихреисточники и диполи)
 **
 **     1 - все частицы имеют изначальный единичный момент (массу)
 **     2 - скорость движения и масса исходно ортонормированны на единицу
 **     3 - инерционное ускорение приводит к дефектам массы и формы частицы
 **
 **                                            (c)2021 ‏יְרוּשָׁלַיִם
 **/
#include "Dipoles.h"
#include "../Window/View.h"

Dipoles *Dipoles_array=0;  // множество или рой из групп диполей в пространстве
unsigned nDip=0,           // количество корпускул в активном эксперименте
         Time_count=0;     // отсчёты временных шагов от запуска эксперимента

void ReInstall_TimeSpace( int N )  // продолжительность во времени Dipole_route
{                                  // в переустановке используется исходный рой
  for( int i=0; i<Dipole_route; i++ )Dipoles_array[i].Install( N ); nDip=N;
                                     Dipoles_array->Initial();
  //
  //  начальная установка с обнулением счётчика исполненных тактов эксперимента
  //
  Time_count=0;
  clrscr();
}
//
//  Главная программа
//
int main( int argc, char** argv )
{                                 // однократное распределение всех маршрутов
  Dipoles_array =                 // для хранения динамики движения во времени
      (Dipoles*)Allocate( Dipole_route*sizeof( Dipoles ) );

  ReInstall_TimeSpace( 1 );            // поначалу будет только одна корпускула
                                       //  что не сильно перегрузит вычислители
  while( VideoStage() )                // проверка, жива ли еще сама программа
  {                                    // запускается интервальный таймер и
    WaitTime( Quantum_wait,            // время задержки для внешних операций
              One_Time_Step,           // собственно процедура расчётного цикла
              nDip<2?0:Quantum_exp );  // счёт по exp и приостановка на wait мс
  }                   // одна частичка не сильно грузит вычислительные процессы
  return 18;
}
