//
//    Математические модели настройки вычислительных экспериментов
//      с использованием вертикальных профилей трохоидальных волн
//                                                         ©2020 ‏יְרוּשָׁלַיִם
//
#include <StdIO.h>
#include "..\..\Window\View.h" // подборка процедур графических манипуляций или
#include "..\..\Window\ConIO.h" // собственно графическая оболочка Window-Place
                               // + текущий\полный пакет тензорной математики
const Real Eps=1.0e-6,        // = относительный ноль
        GrWave=17.5,          // количество фазовых полуволн в групповом пакете
         tKrat=M_SQRT2*32;    // дробление шага времени / точность-корректность
                              // сие не должно влиять на форму и отражение волн
                              // Управляющие маски вычислительного эксперимента
enum{ stille,shallow,surface,compose }; // штиль-мелководье-волна-полуотражение
          // status::wave: 1 - длинная волна; 2 + горизонтальные смещения узлов
          //               +++ трёхмерные волновые структуры ???
enum{ Wave_free,Wave_right,Wave_left,Waves_meet };  // (-)left & right(+)
          // status::bound: ключи к генератору волн на свободных границах
          //                3 - моделируются одинаковые встречные волны
          //                2 - слева, 1 - справа, 0 - чисто-зависимо...
struct Waves:Window // в сцепке с Window-Place
{ Event Instant;    // исходное время вычислительного эксперимента
  Vector *dH,*H,*M, // векторные\неравномерные поля скорости и уровня
         *dV,*V,*Y; //    с их дифференциалами для усложненного анализа
  Real Tlaps,       //! время от начального отсчета для распространения волны
       Tcalc,       //  внутренний отсчёт на момент вычислительного процесса
       Long,        //  протяженность бассейна для моделирования группы волн
       dT,          //  ++ исходный шаг вычислительного эксперимента во времени
       Ds,          //  пространственный шаг расчетной сетки под шаг во времени
                    //! Характеристики моделируемой трохоидальной волны
       Length,Rw,   //  длина и радиус-коэффициент относительной высоты волны
       Cw,          //  фазовая / дисперсионная скорость движения фронта волны
                    //! Поправки к крутизне и устремлённости ветрового волнения
       Crest,       //  ++ заглубление и кноидальность волнового профиля  [0÷1]
       Wind,        //  ++ ветровое напряжение или асимметрия поверхности [0÷1]
                    //! разные и временно рабочие параметры и массивы
       *D,*G;       //  временный массив для оценок закрутки потока
  Real              //! Подвижная непроницаемая / отражающая граница
       wH,          //  абсцисса местоположения на заданный момент времени [м]
       wV;          //  скорость отсчитывается в долях от фазовой волны  [м/с]
  int  Kt,Kd,       //! количество отсчетов времени на счете и прорисовке волны
       Qw,          //  количество полуволн в посылке через свободную границу
       Nx;          //  количество узлов в сетке на всю протяженность бассейна
  struct status     //! Управляющая маска режимов вычислительного эксперимента
  { byte bound: 2;  //  направление генерации волнения на свободных границах
                    //   волна 1-справа; 2-слева; 3-отовсюду и 0-по поверхности
    byte front: 1;  //  сглаживание фронта или в первом вступлении чистый синус
    byte waves: 1;  //  тип волны: 0 - длинно-плоская или 1 - трохоидальная
    byte crest: 1;  //  процесс: 0 - гармонический; 1 - гребни с дисперсией
    byte power: 1;  //  контроль выравнивания энергии - групповых структур волн
  } Exp;            //
  Waves();          // в конструкторе собраны все начальные и граничные условия
  bool Timer();    //! всё выполняется по таймеру с ожиданием реального времени
  bool KeyBoard( byte Keyb );     // виртуальная процедура обработки прерываний
  void Initial();                 // возврат эксперимента к исходному состоянию
  Vector Wave(_Real T,Vector R );  // аналитика волны на текущий момент времени
  Vector Squad(_Real T,Vector R );  //    ++  оконтуривание групповой структуры
  Waves& Simulation();              // прямое моделирование трохоидальной волны
  Waves& Drawing();                 // подпрограмма прорисовки плоской картинки
  Waves& Config();                  // подменю настройки режимов эксперимента
  void TextInfo();  // о ходе вычислительного эксперимента на текстовой консоли
};
// Прямая по двум точкам в координатах 0-1, и уточнение второй точки по 0,1,1+d
//
inline Real iTwo(_Real A,_Real B,_Real x ){ return A+(B-A)*x; } // точки 0,1->x
inline Real bTwo(_Real A,_Real C,_Real d ){ return A+(C-A)/(1+d); }// 0,1:x,1+d
//
// Немного ускоренное нахождение координат точки пересечения с горизонталью
//
inline Real Cross( _Real Y, _Real x3,_Real y3, _Real x4,_Real y4 )
{ return // abs(y4-y3)<1e-6 ? (x3+x4)/2.0 :
       ( Y*(x4-x3) + (x3*y4-y3*x4) )/(y4-y3);
}
inline bool Cross( Real &X,Real Y, Real x3,Real y3, Real x4,Real y4 )
{ Real Det=( y4-y3 ); if( abs( Det )<1e-24 )return false;
       X=( Y*(x4-x3) + (x3*y4-y3*x4) )/Det; return true;
}
