//
//                                           Ver 3.2 /1991.01.19 - 2013.11.04/
//
//      Векторы и двухмерные пространства адресных последовательностей
//
//      При распределении памяти резервируется одно слово для хранения длины
//          массива в байтах, а для матриц здесь сохраняется количество строк
//      Если длина указывается нулевой,
//          то происходит освобождение существующего массива
//      Если адрес нулевой - выделяется новый массив, иначе происходит
//          перераспределения памяти, при котором начальный фрагмент
//          сохраняется, добавленный - очищается
//      Если при распределении двумерного массива в качестве длины строк
//          указывается 0, то реальное распределение и памяти и управление
//          типом и длиной строк производится в вызывающей программе.
//
#if !defined(__Allocate__) && !defined(__Type_h__)
#include <StdLib.h>             // На выходе из запроса длина массива в байтах
size_t Allocate( void* A );     //              или - количество строк матрицы
void  *Allocate( size_t s, void *A=NULL );      // Линейный массив -- в байтах
void **Allocate( size_t y, size_t s, void *A=NULL ); // Массив массивов
//
//      y -     количество строк в матрице (фиксированном списке)
//       y=0 -  второй параметр не анализируется, а сама матрица удаляется
//      s -     длина строки в байтах
//       s=0 -  новые строки не выделяются, а старые не изменяются
//
#define __Allocate__
#endif
